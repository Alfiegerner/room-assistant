(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{214:function(t,e,a){"use strict";a.r(e);var s=a(3),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("p",[t._v("room-assistant can be configured using YAML and JSON files. It will look for them in the "),a("code",[t._v("config")]),t._v(" subdirectory of the current working directory. The files in the config folder are loaded according to a "),a("a",{attrs:{href:"https://github.com/lorenwest/node-config/wiki/Configuration-Files#file-load-order",target:"_blank",rel:"noopener noreferrer"}},[t._v("specific order"),a("OutboundLink")],1),t._v(" and then merged into a single configuration. In most cases you should only need a single file called "),a("code",[t._v("local.yml")]),t._v(" or "),a("code",[t._v("local.json")]),t._v(" in the config folder though.")]),t._v(" "),a("p",[t._v("For example, let's say you are launching room-assistant from the directory "),a("code",[t._v("/home/pi/room-assistant")]),t._v(". In this case you should create a file "),a("code",[t._v("/home/pi/room-assistant/config/local.yml")]),t._v(" and put your configuration in there.")]),t._v(" "),a("p",[t._v("You can find the global configuration options below and the ones specific to some integrations on their respective pages.")]),t._v(" "),a("h2",{attrs:{id:"configuring-with-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuring-with-docker"}},[t._v("#")]),t._v(" Configuring with Docker")]),t._v(" "),a("p",[t._v("The official "),a("a",{attrs:{href:"https://hub.docker.com/r/mkerix/room-assistant/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker image"),a("OutboundLink")],1),t._v(" can be configured in two different ways. You can either mount your local config folder into the container as "),a("code",[t._v("/room-assistant/config")]),t._v(" or you can provide the configuration as JSON through an environment variable.")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Example docker-compose.yml")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("room-assistant")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mkerix/room"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("assistant\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" host\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("NODE_CONFIG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v('\n        {\n          "global": {\n            "instanceName": "living-room",\n            "integrations": ["homeAssistant", "bluetoothClassic"]\n          }\n        }')]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"core-settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core-settings"}},[t._v("#")]),t._v(" Core Settings")]),t._v(" "),a("p",[a("strong",[t._v("Config Key:")]),t._v(" "),a("code",[t._v("global")])]),t._v(" "),a("p",[t._v("room-assistant exposes a few settings that affect the overall behavior of the application.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Default")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("instanceName")])]),t._v(" "),a("td",[t._v("String")]),t._v(" "),a("td",[t._v("Hostname")]),t._v(" "),a("td",[t._v("The name of the room-assistant instance. May be used as state for some sensors. Put something in")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("integrations")])]),t._v(" "),a("td",[t._v("Array")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("The integrations that should be loaded on this instance, denoted as camelCase.")])])])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("Example Config")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("global")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("instanceName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bedroom\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("integrations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" bluetoothLowEnergy\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" homeAssistant\n")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);